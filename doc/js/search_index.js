var search_data = {"index":{"searchIndex":["moviedata","movietest","add()","mean()","most_similar()","movies()","new()","new()","predict()","rating()","rms()","run_test()","score()","similarity()","stddev()","to_a()","viewers()"],"longSearchIndex":["moviedata","movietest","movietest#add()","movietest#mean()","moviedata#most_similar()","moviedata#movies()","moviedata::new()","movietest::new()","moviedata#predict()","moviedata#rating()","movietest#rms()","moviedata#run_test()","moviedata#score()","moviedata#similarity()","movietest#stddev()","movietest#to_a()","moviedata#viewers()"],"info":[["MovieData","","MovieData.html","","<p>This is the main MovieData class\n"],["MovieTest","","MovieTest.html","","<p>This class holds the results of the predictions\n"],["add","MovieTest","MovieTest.html#method-i-add","(u,m,r,p)","<p>adds an array of data to @results\n"],["mean","MovieTest","MovieTest.html#method-i-mean","()","<p>returns the average predication error (which should be close to zero)\n"],["most_similar","MovieData","MovieData.html#method-i-most_similar","(u, users=@usersData)","<p>this return a list of users whose tastes are most similar to the tastes of\nuser u\n"],["movies","MovieData","MovieData.html#method-i-movies","(u)","<p>returns the array of movies that user u has watched\n"],["new","MovieData","MovieData.html#method-c-new","(folder=nil, set=nil)",""],["new","MovieTest","MovieTest.html#method-c-new","()",""],["predict","MovieData","MovieData.html#method-i-predict","(u, m, users=@usersData)","<p>returns a floating point number between 1.0 and 5.0 as an estimate of what\nuser u would rate movie m …\n"],["rating","MovieData","MovieData.html#method-i-rating","(u,m)","<p>returns the rating that user u gave movie m in the training set, and 0 if\nuser u did not rate movie m …\n"],["rms","MovieTest","MovieTest.html#method-i-rms","()","<p>returns the root mean square error of the prediction\n"],["run_test","MovieData","MovieData.html#method-i-run_test","(k=nil)","<p>runs the z.predict method on the first k ratings in the test set and\nreturns a MovieTest object containing …\n"],["score","MovieData","MovieData.html#method-i-score","(users, user1, x, user2)","<p>returns how far apart the users&#39; ratings are\n"],["similarity","MovieData","MovieData.html#method-i-similarity","(user1, user2, users=@usersData)","<p>this will generate a number which indicates the similarity in movie\npreference between user1 and user2 …\n"],["stddev","MovieTest","MovieTest.html#method-i-stddev","()","<p>returns the standard deviation of the error\n"],["to_a","MovieTest","MovieTest.html#method-i-to_a","()","<p>returns an array of the predictions in the form [u,m,r,p]\n"],["viewers","MovieData","MovieData.html#method-i-viewers","(m)","<p>returns the array of users that have seen movie m\n"]]}}